package com.mycompany.diu_entrega_8;

import java.awt.Dimension;
import java.awt.Point;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.image.BufferedImage;
import java.beans.PropertyVetoException;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JInternalFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.highgui.HighGui;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.Imgproc;

public class Frame extends javax.swing.JFrame {

    static {
        nu.pattern.OpenCV.loadShared();
    }

    static {
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
    }

    JFileChooser fc = new JFileChooser();
    FileNameExtensionFilter filtro = null;
    File fichero = null;

    public Frame() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        escritorio = new javax.swing.JDesktopPane();
        menuBar = new javax.swing.JMenuBar();
        ficheroMenu = new javax.swing.JMenu();
        abrirImagen = new javax.swing.JMenuItem();
        umbralizar = new javax.swing.JMenuItem();
        guardar = new javax.swing.JMenuItem();
        opcionesMenu = new javax.swing.JMenu();
        ayuda = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        salir = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1200, 800));

        javax.swing.GroupLayout escritorioLayout = new javax.swing.GroupLayout(escritorio);
        escritorio.setLayout(escritorioLayout);
        escritorioLayout.setHorizontalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1041, Short.MAX_VALUE)
        );
        escritorioLayout.setVerticalGroup(
            escritorioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 697, Short.MAX_VALUE)
        );

        ficheroMenu.setText("Ficheros");

        abrirImagen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        abrirImagen.setText("Abrir imagen");
        abrirImagen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                abrirImagenActionPerformed(evt);
            }
        });
        ficheroMenu.add(abrirImagen);

        umbralizar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_U, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        umbralizar.setText("Umbralizar");
        umbralizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                umbralizarActionPerformed(evt);
            }
        });
        ficheroMenu.add(umbralizar);

        guardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        guardar.setText("Guardar");
        ficheroMenu.add(guardar);

        menuBar.add(ficheroMenu);

        opcionesMenu.setText("Opciones");

        ayuda.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        ayuda.setText("Ayuda");
        ayuda.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ayudaActionPerformed(evt);
            }
        });
        opcionesMenu.add(ayuda);
        opcionesMenu.add(jSeparator1);

        salir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        salir.setText("Salir");
        salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirActionPerformed(evt);
            }
        });
        opcionesMenu.add(salir);

        menuBar.add(opcionesMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(escritorio)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(escritorio)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ayudaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ayudaActionPerformed
        JOptionPane.showMessageDialog(rootPane, "Selecciona una imagen desde el menú 'Ficheros' para visualizarla.\nPosteriormente podrá umbralizar seleccionando el valor del umbral y guardar la imagen.", "Acerca de", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_ayudaActionPerformed

    private void umbralizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_umbralizarActionPerformed
        if (fichero != null) {
            String input = JOptionPane.showInputDialog(rootPane, "Escribe el valor del umbral", "Umbralizar", JOptionPane.QUESTION_MESSAGE);
            Mat imgOriginal = Imgcodecs.imread(fichero.getAbsolutePath());
            try {
                Mat imgUmbralizada = umbralizar(imgOriginal, Integer.parseInt(input));
                BufferedImage imgUmb = (BufferedImage) HighGui.toBufferedImage(imgUmbralizada);
                VentanaInterna ventanaUmbr = new VentanaInterna(imgUmb);
                ventanaUmbr.setTitle(input);
                ventanaUmbr.setLocation(new Point(this.getWidth() - ventanaUmbr.getWidth() - 20, (int) (Math.random() * (this.getHeight() - ventanaUmbr.getHeight() - 60))));
                escritorio.add(ventanaUmbr);
                try {
                    ventanaUmbr.setSelected(true);
                } catch (PropertyVetoException ex) {
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(rootPane, "Debes introducir un número", "Input erróneo", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(rootPane, "Debes abrir un fichero primero", "Error al umbralizar", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_umbralizarActionPerformed

    private void salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirActionPerformed
        int op = JOptionPane.showConfirmDialog(rootPane, "¿Está seguro que quiere salir?", "Salir", JOptionPane.YES_NO_OPTION);
        if (op == JOptionPane.YES_OPTION) {
            setVisible(false);
            dispose();
        }
    }//GEN-LAST:event_salirActionPerformed

    private void abrirImagenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_abrirImagenActionPerformed
        filtro = new FileNameExtensionFilter("Imágenes", "jpg", "jpeg", "png");
        fc.addChoosableFileFilter(filtro);
        int op = fc.showOpenDialog(null);
        if (op == JFileChooser.APPROVE_OPTION) {
            fichero = fc.getSelectedFile();
            cerrarVentanas();
            try {
                BufferedImage imagen = ImageIO.read(fichero);
                VentanaInterna ventanaInterna = new VentanaInterna(imagen);
                ventanaInterna.setTitle(fichero.getName());
                ventanaInterna.setLocation(new Point(0, 50));
                escritorio.add(ventanaInterna);
                ventanaInterna.setSelected(true);
                if (ventanaInterna.getWidth() > this.getWidth() || ventanaInterna.getHeight() > this.getHeight()) {
                    this.setBounds(this.getLocation().x, this.getLocation().y,
                            (ventanaInterna.getLocation().x + ventanaInterna.getSize().width + 50),
                            (ventanaInterna.getLocation().y + ventanaInterna.getSize().height + 150));
                }
            } catch (IOException ex) {
                Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
            } catch (PropertyVetoException ex) {
                Logger.getLogger(Frame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_abrirImagenActionPerformed

    private Mat umbralizar(Mat imagen_original, Integer umbral) {
// crear dos imágenes en niveles de gris con el mismo
// tamaño que la original
        Mat imagenGris = new Mat(imagen_original.rows(),
                imagen_original.cols(),
                CvType.CV_8U);
        Mat imagenUmbralizada = new Mat(imagen_original.rows(),
                imagen_original.cols(),
                CvType.CV_8U);
// convierte a niveles de grises la imagen original
        Imgproc.cvtColor(imagen_original,
                imagenGris,
                Imgproc.COLOR_BGR2GRAY);
// umbraliza la imagen:
// - píxeles con nivel de gris > umbral se ponen a 1
// - píxeles con nivel de gris <= umbra se ponen a 0
        Imgproc.threshold(imagenGris,
                imagenUmbralizada,
                umbral,
                255,
                Imgproc.THRESH_BINARY);
// se devuelve la imagen umbralizada
        return imagenUmbralizada;
    }

    private void cerrarVentanas() {
        JInternalFrame[] internalFrames = escritorio.getAllFrames();
        for (JInternalFrame internalFrame : internalFrames) {
            internalFrame.dispose();
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Frame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Frame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Frame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Frame.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Frame frame = new Frame();
                frame.setVisible(true);
                frame.addComponentListener(new ComponentAdapter() {
                    @Override
                    public void componentResized(ComponentEvent e) {
                        System.out.println("Resized to " + e.getComponent().getSize());
                        JInternalFrame[] internalFrames = frame.escritorio.getAllFrames();
                        Point aux = new Point(0, 0);
                        for (JInternalFrame internalFrame : internalFrames) {
                            Point botRight = new Point(internalFrame.getBounds().x + internalFrame.getBounds().width, internalFrame.getBounds().y + internalFrame.getBounds().height);
                            if (botRight.x >= aux.x) {
                                aux.x = botRight.x;
                            }
                            if (botRight.y >= aux.y) {
                                aux.y = botRight.y;
                            }
                        }
                        frame.setMinimumSize(new Dimension(aux.x+50, aux.y+100));
                        System.out.println(aux.toString());
                    }
                });
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem abrirImagen;
    private javax.swing.JMenuItem ayuda;
    private javax.swing.JDesktopPane escritorio;
    private javax.swing.JMenu ficheroMenu;
    private javax.swing.JMenuItem guardar;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JMenu opcionesMenu;
    private javax.swing.JMenuItem salir;
    private javax.swing.JMenuItem umbralizar;
    // End of variables declaration//GEN-END:variables

}
